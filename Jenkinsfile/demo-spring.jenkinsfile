#!groovy
@Library('Jenkinslib') _     
def mytools = new org.devops.tools()
import org.devops.demoMap
import org.devops.globalVars

pipeline {
    //指定运行此流水线的节点
    agent any

    environment  {
        def warehouse = "${WORKSPACE}/warehouse"
        def tag = createVersion()
        def repositry = "registry.cn-shanghai.aliyuncs.com/jyjt/${params.branch}-${params.app}"        
    }

    tools {
        maven 'maven' 
    }

    //流水线的阶段
    stages {

        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                            choice(
                                choices: ['develop', 'master'],
                                name: 'branch'
                            ),
                            choice(
                                choices: ['demo-spring-a', 'demo-spring-b'],
                                name: 'app'
                            )
                        ])
                    ])
                }
            }
        }

        stage('Enviroments') {
            steps {
                echo "${warehouse}"
                echo "${tag}"
            }
        }

        stage('sharedlibaray') {
            steps{                
                echo 'Hello world'
                sayHi "sharedlibaraySteps"

                println globalVars.foo
                
                println demoMap.'demo-spring-a'
            }
        }

        stage('git') {
            steps {
                sh"""
                    cd ${warehouse}
                    git reset --hard HEAD
                    git switch ${params.branch}
                    git fetch --all
                    git reset --hard origin/${params.branch}
                    git pull origin ${params.branch}
                """
                script {
                    commitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    mytools.PrintMes("项目的commitId=${commitId}",'blue')  
                }  
            }
        }
        stage('Complie') {
            steps {
                sh """
                    cd ${warehouse}
                    mvn clean install
                    cp -fr ${warehouse}/target/demo-0.0.1-SNAPSHOT.jar ${warehouse}/docker
                """
                script {
                    mytools.PrintMes("编译阶段",'green')  
                }            
            }
        }
        stage ('operation by docker') {
            steps {
                script{
                    sh """
                        cd ${warehouse}/docker
                        docker build -t ${repositry}:${tag} .
                        docker push ${repositry}:${tag}
                        docker rmi -f ${repositry}:${tag}
                    """
                    mytools.PrintMes("docker镜像制作",'yellow') 
                }
            }
        }
        stage ('kubernetes update apps') {
            steps {
                script {
                    sh "ssh 10.230.7.20 'kubectl set image deployment/hwy-1 hwy=${repositry}:${tag} -n default'"
                    mytools.PrintMes("更新k8s镜像",'red')                     
                }
            }
        }
    }
    post {
        always {
            script{
                println("always find post messages")
            }
        }

        success {
            script{
                commitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                mytools.PrintMes("本次的commitId -> ${commitId}",'purple') 
                mytools.PrintMes("构建的镜像 -> ${repositry}:${tag}",'purple')                 
            }
        }

        aborted {
            script{
                currentBuild.description = "构建取消!" 
            }
        }
    }
}

def createVersion() {
    return new Date().format('yyyyMMddHHmm')
}

