#!groovy
@Library('Jenkinslib') _     
def mytools = new org.devops.tools()

pipeline {
    //指定运行此流水线的节点
    agent any

    environment  {
        def warehouse = "${WORKSPACE}/warehouse"
        def tag = createVersion()
        def repositry = "registry.cn-shanghai.aliyuncs.com/jyjt/${params.branch}-${params.app}"
    }

    tools {
        maven 'm2' 
    }

    //流水线的阶段
    stages {
        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                            choice(
                                choices: ['develop', 'master'],
                                name: 'branch'
                            ),
                            choice(
                                choices: ['demo-spring-a', 'demo-spring-b'],
                                name: 'app'
                            )
                        ])
                    ])
                }
            }
        }

        stage('Enviroments') {
            steps {
                echo "${warehouse}"
                echo "${tag}"
            }
        }

        stage('git') {
            steps {
                sh"""
                    cd ${warehouse}
                    git reset --hard HEAD
                    git switch ${params.branch}
                    git fetch --all
                    git reset --hard origin/${params.branch}
                    git pull origin ${params.branch}
                """
                script {
                    mytools.PrintMes("拉取代码",'green')  
                }  
            }
        }
        stage('Complie') {
            steps {
                /*script{
                    mvnHome = tool "m2"
                    sh """
                      cd ${warehouse}     
                      ${mvnHome}/bin/mvn --version                 
                    """
                    //  ${mvnHome}/bin/mvn clean install
                    //  cp -fr ${warehouse}/target/demo-0.0.1-SNAPSHOT.jar ${warehouse}/docker
                }*/
                sh 'mvn --version'  
                script {
                    mytools.PrintMes("编译阶段",'green')  
                }            
            }
        }
        stage ('operation by docker') {
            steps {
                script{
                    sh """
                        cd ${warehouse}/docker
                        docker build -t ${repositry}:${tag} .
                        docker push ${repositry}:${tag}
                        docker rmi -f ${repositry}:${tag}
                    """
                    mytools.PrintMes("docker镜像制作",'yellow') 
                }
            }
        }
        stage ('kubernetes update apps') {
            steps {
                script {
                    sh "ssh 10.230.7.20 'kubectl set image deployment/hwy-1 hwy=${repositry}:${tag} -n default'"
                    mytools.PrintMes("更新k8s镜像",'red')                     
                }
            }
        }
    }
    post {
        always {
            script{
                println("always")
            }
        }

        success {
            script{
                currentBuild.description = "构建成功!" 
                mytools.PrintMes("构建的镜像为 -> ${repositry}:${tag}",'purple') 
            }
        }

        failure {
            script{
                currentBuild.description = "\n 构建失败!" 
            }
        }

        aborted {
            script{
                currentBuild.description = "构建取消!" 
            }
        }
    }
}

def createVersion() {
    return new Date().format('yyyyMMddHHmm')
}
